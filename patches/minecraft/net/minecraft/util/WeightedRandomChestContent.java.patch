--- ../src_base/minecraft/net/minecraft/util/WeightedRandomChestContent.java
+++ ../src_work/minecraft/net/minecraft/util/WeightedRandomChestContent.java
@@ -1,9 +1,14 @@
 package net.minecraft.util;
 
 import java.util.Random;
+
+import cpw.mods.fml.common.FMLLog;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntityChest;
 import net.minecraft.tileentity.TileEntityDispenser;
+import net.minecraftforge.common.ChestGenHooks;
+import net.minecraftforge.common.DungeonHooks;
 
 public class WeightedRandomChestContent extends WeightedRandomItem
 {
@@ -35,27 +40,17 @@
     /**
      * Generates the Chest contents.
      */
+    @SuppressWarnings("deprecation")
     public static void generateChestContents(Random par0Random, WeightedRandomChestContent[] par1ArrayOfWeightedRandomChestContent, TileEntityChest par2TileEntityChest, int par3)
     {
         for (int var4 = 0; var4 < par3; ++var4)
         {
             WeightedRandomChestContent var5 = (WeightedRandomChestContent)WeightedRandom.getRandomItem(par0Random, par1ArrayOfWeightedRandomChestContent);
-            int var6 = var5.theMinimumChanceToGenerateItem + par0Random.nextInt(var5.theMaximumChanceToGenerateItem - var5.theMinimumChanceToGenerateItem + 1);
+            ItemStack[] stacks = var5.generateChestContent(par0Random, par2TileEntityChest);
 
-            if (var5.theItemId.getMaxStackSize() >= var6)
+            for (ItemStack item : stacks)
             {
-                ItemStack var7 = var5.theItemId.copy();
-                var7.stackSize = var6;
-                par2TileEntityChest.setInventorySlotContents(par0Random.nextInt(par2TileEntityChest.getSizeInventory()), var7);
-            }
-            else
-            {
-                for (int var9 = 0; var9 < var6; ++var9)
-                {
-                    ItemStack var8 = var5.theItemId.copy();
-                    var8.stackSize = 1;
-                    par2TileEntityChest.setInventorySlotContents(par0Random.nextInt(par2TileEntityChest.getSizeInventory()), var8);
-                }
+                par2TileEntityChest.setInventorySlotContents(par0Random.nextInt(par2TileEntityChest.getSizeInventory()), item);
             }
         }
     }
@@ -68,22 +63,11 @@
         for (int var4 = 0; var4 < par3; ++var4)
         {
             WeightedRandomChestContent var5 = (WeightedRandomChestContent)WeightedRandom.getRandomItem(par0Random, par1ArrayOfWeightedRandomChestContent);
-            int var6 = var5.theMinimumChanceToGenerateItem + par0Random.nextInt(var5.theMaximumChanceToGenerateItem - var5.theMinimumChanceToGenerateItem + 1);
+            ItemStack[] stacks = var5.generateChestContent(par0Random, par2TileEntityDispenser);
 
-            if (var5.theItemId.getMaxStackSize() >= var6)
+            for (ItemStack item : stacks)
             {
-                ItemStack var7 = var5.theItemId.copy();
-                var7.stackSize = var6;
-                par2TileEntityDispenser.setInventorySlotContents(par0Random.nextInt(par2TileEntityDispenser.getSizeInventory()), var7);
-            }
-            else
-            {
-                for (int var9 = 0; var9 < var6; ++var9)
-                {
-                    ItemStack var8 = var5.theItemId.copy();
-                    var8.stackSize = 1;
-                    par2TileEntityDispenser.setInventorySlotContents(par0Random.nextInt(par2TileEntityDispenser.getSizeInventory()), var8);
-                }
+                par2TileEntityDispenser.setInventorySlotContents(par0Random.nextInt(par2TileEntityDispenser.getSizeInventory()), item);
             }
         }
     }
@@ -109,4 +93,18 @@
 
         return var2;
     }
+
+    // -- Forge hooks
+    /**
+     * Allow a mod to submit a custom implementation that can delegate item stack generation beyond simple stack lookup
+     *
+     * @param random The current random for generation
+     * @param newInventory The inventory being generated (do not populate it, but you can refer to it)
+     * @return An array of {@link ItemStack} to put into the chest
+     */
+    protected ItemStack[] generateChestContent(Random random, IInventory newInventory)
+    {
+        return ChestGenHooks.generateStacks(random, theItemId, theMinimumChanceToGenerateItem, theMaximumChanceToGenerateItem);
+    }
+
 }
